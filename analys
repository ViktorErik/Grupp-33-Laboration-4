UPPGIFT 2 analys:

* Analysera de beroenden som finns med avseende på cohesion och coupling, och Dependency Inversion Principle.

Vilka beroenden är nödvändiga?
Vi har skapat ett interface som heter Movable, där metoderna move, turnLeft och turnRight finns.
Dessa är naturligtvis nödvändiga för alla fordon. Därför implementeras detta interface i Car-klassen.
Dessutom ärver alla fordon från Car-klassen, eftersom alla fordon använder sig av alla Car-metoder.
Dessutom använder vi interfacet NonLoadable för fordon som inte ska kunna lastas på CarTransportTruck. Vi behöver
också extenda JFrame och JPanel för att kunna visualisera spelet. Car är lite beroende av CarView då den
använder storleken av skärmen för att hantera kollisioner mellan bil och kanter. Dessutom använder
sig Car av fält från DrawPanel för att hantera kollision mellan bil och workshop.

* Vilka klasser är beroende av varandra som inte borde vara det?
* Finns det starkare beroenden än nödvändigt?
I CarController skriver vi explicit ut vilka klasser som har turbo och att Scania har
flatbed exempelvis. Här hade vi bättre kunnat implementera Dependency Inversion Principle, och använda oss
av ett interface för att särskilja fordon som har turbo och som inte har turbo samt fordon som
flatbed och fordon som inte har flatbed. Car är även starkt beroende av Volvo240 då vi kollar efter
kollision mellan Volvo240 och volvoWorkshop. För att göra så att alla bilar ska kunna köra in i sina egna workshops
hade vi kunnat göra en abstract metod i Car som sedan implementeras i alla klasser som extendar Car.

* Kan ni identifiera några brott mot övriga designprinciper vi pratat om i kursen?
Car bryter på sätt och vis mot Single Responsibility Principle då den hanterar alla funktioner som har med bilen
att göra, men den hanterar också kollision med kanter av fönstret och kollision med volvoWorkshop. Man skulle
kunna separera kollision från Car-klassen och hantera kollision i en egen klass. DrawPanel bryter mot Open-Closed
Principle då vi har hårdkodat volvoWorkshop. Egentligen borde man kunna lägga in vilken workshop man vill
och inte bara volvoWorkshop.



UPPGIFT 3 analys:
* Analysera era klasser med avseende på Separation of Concern (SoC) och Single Responsibility Principle (SRP).
* Vilka ansvarsområden har era klasser?
AutoRepairShop: Implementation av en AutoRepairShop.
Car: Ansvarar för alla fält och metoder som är gemensamma för alla bilar, samt kollision med workshop och borders.
CarController: Skapar objekt av typerna Saab, Volvo och Scania. Den kör också spel-loopen och skapar en CarView. Den
flyttar på bilarna och implementerar funktioner för gas, brake etc så att alla bilar gasar när man
trycker på gas-knappen.
CarTransportTruck: Implementation av CarTransportTruck.
CarView: Skapar JPanels för knappar och JButtons för dem. Funktionalitet läggs till för alla knappar.
DrawPanel: Skapar BufferedImage:s för Volvo, Saab, Scania och volvoWorkshop. Fönstret uppdateras
med nya värden för bilarnas position varje frame i paintComponent.
Saab95: Implementation av Saab med bl.a. turboOn
Scania: Implementation av Scania med t.ex. tiltFlatbed.
TestCars: Testar alla fordon och AutoRepairShop
Volvo240: Implementation av Volvo med speedFactor.

* Vilka anledningar har de att förändras?
* På vilka klasser skulle ni behöva tillämpa dekomposition för att bättre följa SoC och SRP?
Car har för mycket ansvar. Den borde inte behöva hantera kollision med border eller med workshop. Car skulle
också eventuellt kunna flytta move-funktionen till en klass där kollision hanteras.
CarController har också mycket ansvar. Den skulle kunna delas upp så att en klass kör spel-loopen och flyttar på
bilarna, och en klass som skapar en CarView som ansvarar för att anropa repaint och uppdatera fönstret.


UPPGIFT 4 analys:



