Uppgift 2: Model-View-Controller
Användargränssnittet ni utgick från i del 3 var en ansats till implementation av Model-View-Controller Pattern, men där gränsdragningen mellan model, view, controller och applikation inte var något vidare genomtänkt (för att inte säga usel).

*Vilka avvikelser från MVC-idealet kan ni identifiera i det ursprungliga användargränssnittet? Vad borde ha gjorts smartare, dummare eller tunnare?

    Det största problemet är att CarView och CarController har varsin field av varann. Alltså finns det
    en CarController i CarView och vice versa. Ett av problemen med det är att viewen blir för smart.
    Den har tillgång till nästan allt i projektet då CarController har det. Vi vill istället att
    CarController har en CarView men inte tvärt om.

    Ett annat problem var att Car använde sig av CarView och DrawPanel. Modelen ska inte veta att view ens existerar.
    Så att den använder sig av viewen är en direkt förbrytelse mot MVC.

    För att en bil ska existera i vårt program så skapar vi dem i CarController. Det hade nog varit bättre med en
    factoryklass för att skapa bilar.

**Vilka av dessa brister åtgärdade ni med er nya design från del 3? Hur då? Vilka brister åtgärdade ni inte?

    Det enda som vi ändrade var att lägga till Movement som en klass. Det gör att Car inte har move funktionen
    vilket i sin tur leder till att Car inte längre använder sig av viewen.

    Resten av bristerna som är listade ovan har inte åtgärdats.

***Rita ett nytt UML-diagram som beskriver en förbättrad design med avseende på MVC.

    Finns i: LAB4_UML1.drawio.png

Uppgift 3: Fler designmönster

*Observer, Factory Method, State, Composite. För vart och ett av dessa fyra designmönster, svara på följande frågor:
    -Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt? Vilka designproblem löste ni genom att använda det?

        Observer Pattern är en grundläggande del utav JavaSwing paketet. Eftersom det används mycket i vårt projekt
        så är det en pattern som vi implementerar.

        Factory Method Pattern är något vi implementerar i UML diagrammet som en förändring vi tycker kommer förbättra
        koden. Detta pga vi kommer få lägre coupling.

        State Pattern använder vi oss inte av alls. Detta på grund av att vi tycker att det är onödigt i detta fall.

        Composite Pattern använder vi oss av i panelerna med knapparna och liknande. Varje knapp ligger i en och samma
        JPanel vilket är ett bra exempel av Composite Pattern.

    -Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern? Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?

        Som vi nämnde i förra frågan, Factory Method pattern är ett designmönster som passar bra med att skapa bilarna
        i vår kod. Därför är det något vi tänkt implementera i nästa refaktorisering.

        Resten av mönstrerna tycker vi är antingen bra använda, eller onödiga att använda.

**Uppdatera er design med de förbättringar ni identifierat.

